///
/// NoahToolsAutolinking.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import <Foundation/Foundation.h>
#import <NitroModules/HybridObjectRegistry.hpp>
#import "NoahTools-Swift-Cxx-Umbrella.hpp"
#import <type_traits>

#include "HybridNoahToolsSpecSwift.hpp"
#include "HybridNoahToolsCpp.hpp"

@interface NoahToolsAutolinking : NSObject
@end

@implementation NoahToolsAutolinking

+ (void) load {
  using namespace margelo::nitro;
  using namespace margelo::nitro::noahtools;

  HybridObjectRegistry::registerHybridObjectConstructor(
    "NoahTools",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<HybridNoahToolsSpec> hybridObject = NoahTools::NoahToolsAutolinking::createNoahTools();
      return hybridObject;
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "NoahToolsCpp",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridNoahToolsCpp>,
                    "The HybridObject \"HybridNoahToolsCpp\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridNoahToolsCpp>();
    }
  );
}

@end
