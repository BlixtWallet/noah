///
/// HybridNoahToolsSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNoahToolsSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridNoahToolsSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::noahtools::bridge::swift`)
   * from `NoahTools-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.noahtools.bridge.swift

  /**
   * Holds an instance of the `HybridNoahToolsSpec` Swift protocol.
   */
  private var __implementation: any HybridNoahToolsSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridNoahToolsSpec_

  /**
   * Create a new `HybridNoahToolsSpec_cxx` that wraps the given `HybridNoahToolsSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNoahToolsSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNoahToolsSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNoahToolsSpec() -> any HybridNoahToolsSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNoahToolsSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNoahToolsSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNoahToolsSpec_cxx {
    return Unmanaged<HybridNoahToolsSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridNoahToolsSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridNoahToolsSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridNoahToolsSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridNoahToolsSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func getAppVariant() -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.getAppVariant()
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getAppLogs() -> bridge.Result_std__shared_ptr_Promise_std__vector_std__string____ {
    do {
      let __result = try self.__implementation.getAppLogs()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_std__string_ in
              var __vector = bridge.create_std__vector_std__string_(__result.count)
              for __item in __result {
                __vector.push_back(std.string(__item))
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createBackup(mnemonic: std.string) -> bridge.Result_std__shared_ptr_Promise_std__string___ {
    do {
      let __result = try self.__implementation.createBackup(mnemonic: String(mnemonic))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func restoreBackup(encryptedData: std.string, mnemonic: std.string) -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.restoreBackup(encryptedData: String(encryptedData), mnemonic: String(mnemonic))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func nativePost(url: std.string, body: std.string, headers: bridge.std__unordered_map_std__string__std__string_, timeoutSeconds: Double) -> bridge.Result_std__shared_ptr_Promise_HttpResponse___ {
    do {
      let __result = try self.__implementation.nativePost(url: String(url), body: String(body), headers: { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: headers.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(headers)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(headers, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }(), timeoutSeconds: timeoutSeconds)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_HttpResponse__ in
        let __promise = bridge.create_std__shared_ptr_Promise_HttpResponse__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_HttpResponse__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_HttpResponse___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_HttpResponse___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func nativeGet(url: std.string, headers: bridge.std__unordered_map_std__string__std__string_, timeoutSeconds: Double) -> bridge.Result_std__shared_ptr_Promise_HttpResponse___ {
    do {
      let __result = try self.__implementation.nativeGet(url: String(url), headers: { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: headers.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(headers)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(headers, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }(), timeoutSeconds: timeoutSeconds)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_HttpResponse__ in
        let __promise = bridge.create_std__shared_ptr_Promise_HttpResponse__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_HttpResponse__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_HttpResponse___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_HttpResponse___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func nativeLog(level: std.string, tag: std.string, message: std.string) -> bridge.Result_void_ {
    do {
      try self.__implementation.nativeLog(level: String(level), tag: String(tag), message: String(message))
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func playAudio(filePath: std.string) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.playAudio(filePath: String(filePath))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func pauseAudio() -> bridge.Result_void_ {
    do {
      try self.__implementation.pauseAudio()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func stopAudio() -> bridge.Result_void_ {
    do {
      try self.__implementation.stopAudio()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func resumeAudio() -> bridge.Result_void_ {
    do {
      try self.__implementation.resumeAudio()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func seekAudio(positionSeconds: Double) -> bridge.Result_void_ {
    do {
      try self.__implementation.seekAudio(positionSeconds: positionSeconds)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getAudioDuration() -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.getAudioDuration()
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getAudioPosition() -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.getAudioPosition()
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isAudioPlaying() -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.isAudioPlaying()
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
}
