///
/// HybridNoahToolsSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNoahToolsSpec``
public protocol HybridNoahToolsSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getAppVariant() throws -> String
  func getAppLogs() throws -> Promise<[String]>
  func createBackup(mnemonic: String) throws -> Promise<String>
  func restoreBackup(encryptedData: String, mnemonic: String) throws -> Promise<Bool>
  func nativePost(url: String, body: String, headers: Dictionary<String, String>, timeoutSeconds: Double) throws -> Promise<HttpResponse>
  func nativeGet(url: String, headers: Dictionary<String, String>, timeoutSeconds: Double) throws -> Promise<HttpResponse>
  func nativeLog(level: String, tag: String, message: String) throws -> Void
  func playAudio(filePath: String) throws -> Promise<Void>
  func pauseAudio() throws -> Void
  func stopAudio() throws -> Void
  func resumeAudio() throws -> Void
  func seekAudio(positionSeconds: Double) throws -> Void
  func getAudioDuration() throws -> Double
  func getAudioPosition() throws -> Double
  func isAudioPlaying() throws -> Bool
}

/// See ``HybridNoahToolsSpec``
open class HybridNoahToolsSpec_base {
  private weak var cxxWrapper: HybridNoahToolsSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNoahToolsSpec_cxx {
  #if DEBUG
    guard self is HybridNoahToolsSpec else {
      fatalError("`self` is not a `HybridNoahToolsSpec`! Did you accidentally inherit from `HybridNoahToolsSpec_base` instead of `HybridNoahToolsSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNoahToolsSpec_cxx(self as! HybridNoahToolsSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NoahTools HybridObject.
 * Implement this protocol to create Swift-based instances of NoahTools.
 * ```swift
 * class HybridNoahTools : HybridNoahToolsSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNoahToolsSpec = HybridNoahToolsSpec_protocol & HybridNoahToolsSpec_base
