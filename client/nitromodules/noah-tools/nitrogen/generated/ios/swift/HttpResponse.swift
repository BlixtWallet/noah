///
/// HttpResponse.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `HttpResponse`, backed by a C++ struct.
 */
public typealias HttpResponse = margelo.nitro.noahtools.HttpResponse

public extension HttpResponse {
  private typealias bridge = margelo.nitro.noahtools.bridge.swift

  /**
   * Create a new instance of `HttpResponse`.
   */
  init(status: Double, body: String, headers: Dictionary<String, String>) {
    self.init(status, std.string(body), { () -> bridge.std__unordered_map_std__string__std__string_ in
      var __map = bridge.create_std__unordered_map_std__string__std__string_(headers.count)
      for (__k, __v) in headers {
        bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
      }
      return __map
    }())
  }

  var status: Double {
    @inline(__always)
    get {
      return self.__status
    }
    @inline(__always)
    set {
      self.__status = newValue
    }
  }
  
  var body: String {
    @inline(__always)
    get {
      return String(self.__body)
    }
    @inline(__always)
    set {
      self.__body = std.string(newValue)
    }
  }
  
  var headers: Dictionary<String, String> {
    @inline(__always)
    get {
      return { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: self.__headers.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(self.__headers)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(self.__headers, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }()
    }
    @inline(__always)
    set {
      self.__headers = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var __map = bridge.create_std__unordered_map_std__string__std__string_(newValue.count)
        for (__k, __v) in newValue {
          bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
        }
        return __map
      }()
    }
  }
}
