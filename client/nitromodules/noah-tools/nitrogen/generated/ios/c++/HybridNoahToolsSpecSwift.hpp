///
/// HybridNoahToolsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNoahToolsSpec.hpp"

// Forward declaration of `HybridNoahToolsSpec_cxx` to properly resolve imports.
namespace NoahTools { class HybridNoahToolsSpec_cxx; }



#include <string>
#include <vector>
#include <NitroModules/Promise.hpp>

#include "NoahTools-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::noahtools {

  /**
   * The C++ part of HybridNoahToolsSpec_cxx.swift.
   *
   * HybridNoahToolsSpecSwift (C++) accesses HybridNoahToolsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNoahToolsSpec_cxx can directly inherit from the C++ class HybridNoahToolsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNoahToolsSpecSwift: public virtual HybridNoahToolsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNoahToolsSpecSwift(const NoahTools::HybridNoahToolsSpec_cxx& swiftPart):
      HybridObject(HybridNoahToolsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NoahTools::HybridNoahToolsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string getAppVariant() override {
      auto __result = _swiftPart.getAppVariant();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<std::string>>> getAppLogs() override {
      auto __result = _swiftPart.getAppLogs();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> zipDirectory(const std::string& sourceDirectory, const std::string& outputZipPath) override {
      auto __result = _swiftPart.zipDirectory(sourceDirectory, outputZipPath);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NoahTools::HybridNoahToolsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::noahtools
