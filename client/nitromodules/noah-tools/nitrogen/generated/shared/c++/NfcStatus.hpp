///
/// NfcStatus.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::noahtools {

  /**
   * A struct which can be represented as a JavaScript object (NfcStatus).
   */
  struct NfcStatus {
  public:
    bool isSupported     SWIFT_PRIVATE;
    bool isEnabled     SWIFT_PRIVATE;

  public:
    NfcStatus() = default;
    explicit NfcStatus(bool isSupported, bool isEnabled): isSupported(isSupported), isEnabled(isEnabled) {}
  };

} // namespace margelo::nitro::noahtools

namespace margelo::nitro {

  // C++ NfcStatus <> JS NfcStatus (object)
  template <>
  struct JSIConverter<margelo::nitro::noahtools::NfcStatus> final {
    static inline margelo::nitro::noahtools::NfcStatus fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::noahtools::NfcStatus(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isSupported")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isEnabled"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::noahtools::NfcStatus& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "isSupported", JSIConverter<bool>::toJSI(runtime, arg.isSupported));
      obj.setProperty(runtime, "isEnabled", JSIConverter<bool>::toJSI(runtime, arg.isEnabled));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isSupported"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isEnabled"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
