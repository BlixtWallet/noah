///
/// JHybridNoahToolsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNoahToolsSpec.hpp"



#include <string>
#include <vector>
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::noahtools {

  jni::local_ref<JHybridNoahToolsSpec::jhybriddata> JHybridNoahToolsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNoahToolsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNoahToolsSpec::initHybrid),
    });
  }

  size_t JHybridNoahToolsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNoahToolsSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridNoahToolsSpec::getAppVariant() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getAppVariant");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  std::shared_ptr<Promise<std::vector<std::string>>> JHybridNoahToolsSpec::getAppLogs() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getAppLogs");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::vector<std::string>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<jni::JString>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridNoahToolsSpec::createBackup(const std::string& mnemonic) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* mnemonic */)>("createBackup");
    auto __result = method(_javaPart, jni::make_jstring(mnemonic));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridNoahToolsSpec::restoreBackup(const std::string& encryptedData, const std::string& mnemonic) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* encryptedData */, jni::alias_ref<jni::JString> /* mnemonic */)>("restoreBackup");
    auto __result = method(_javaPart, jni::make_jstring(encryptedData), jni::make_jstring(mnemonic));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridNoahToolsSpec::nativeLog(const std::string& level, const std::string& tag, const std::string& message) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* level */, jni::alias_ref<jni::JString> /* tag */, jni::alias_ref<jni::JString> /* message */)>("nativeLog");
    method(_javaPart, jni::make_jstring(level), jni::make_jstring(tag), jni::make_jstring(message));
  }
  std::shared_ptr<Promise<void>> JHybridNoahToolsSpec::playAudio(const std::string& filePath) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* filePath */)>("playAudio");
    auto __result = method(_javaPart, jni::make_jstring(filePath));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridNoahToolsSpec::pauseAudio() {
    static const auto method = javaClassStatic()->getMethod<void()>("pauseAudio");
    method(_javaPart);
  }
  void JHybridNoahToolsSpec::stopAudio() {
    static const auto method = javaClassStatic()->getMethod<void()>("stopAudio");
    method(_javaPart);
  }
  void JHybridNoahToolsSpec::resumeAudio() {
    static const auto method = javaClassStatic()->getMethod<void()>("resumeAudio");
    method(_javaPart);
  }
  void JHybridNoahToolsSpec::seekAudio(double positionSeconds) {
    static const auto method = javaClassStatic()->getMethod<void(double /* positionSeconds */)>("seekAudio");
    method(_javaPart, positionSeconds);
  }
  double JHybridNoahToolsSpec::getAudioDuration() {
    static const auto method = javaClassStatic()->getMethod<double()>("getAudioDuration");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridNoahToolsSpec::getAudioPosition() {
    static const auto method = javaClassStatic()->getMethod<double()>("getAudioPosition");
    auto __result = method(_javaPart);
    return __result;
  }
  bool JHybridNoahToolsSpec::isAudioPlaying() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isAudioPlaying");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::noahtools
