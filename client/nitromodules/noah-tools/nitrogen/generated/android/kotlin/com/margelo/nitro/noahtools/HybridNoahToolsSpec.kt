///
/// HybridNoahToolsSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.noahtools

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the NoahTools HybridObject.
 * Implement this abstract class to create Kotlin-based instances of NoahTools.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridNoahToolsSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun getAppVariant(): String
  
  @DoNotStrip
  @Keep
  abstract fun getAppLogs(): Promise<Array<String>>
  
  @DoNotStrip
  @Keep
  abstract fun createBackup(mnemonic: String): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun restoreBackup(encryptedData: String, mnemonic: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun nativePost(url: String, body: String, headers: Map<String, String>, timeoutSeconds: Double): Promise<HttpResponse>
  
  @DoNotStrip
  @Keep
  abstract fun nativeGet(url: String, headers: Map<String, String>, timeoutSeconds: Double): Promise<HttpResponse>
  
  @DoNotStrip
  @Keep
  abstract fun nativeLog(level: String, tag: String, message: String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun playAudio(filePath: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun pauseAudio(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun stopAudio(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun resumeAudio(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun seekAudio(positionSeconds: Double): Unit
  
  @DoNotStrip
  @Keep
  abstract fun getAudioDuration(): Double
  
  @DoNotStrip
  @Keep
  abstract fun getAudioPosition(): Double
  
  @DoNotStrip
  @Keep
  abstract fun isAudioPlaying(): Boolean

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridNoahToolsSpec"
  }
}
