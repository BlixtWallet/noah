///
/// JHybridNoahToolsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNoahToolsSpec.hpp"



#include <string>

namespace margelo::nitro::noahtools {

  jni::local_ref<JHybridNoahToolsSpec::jhybriddata> JHybridNoahToolsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNoahToolsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNoahToolsSpec::initHybrid),
    });
  }

  size_t JHybridNoahToolsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridNoahToolsSpec::getAppVariant() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getAppVariant");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }

} // namespace margelo::nitro::noahtools
